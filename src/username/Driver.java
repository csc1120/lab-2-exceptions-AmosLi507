/*
 * Course: CSC1020
 * Lab 2 - Exceptions
 * Main Driver class
 * Name: Amos Li
 * Last Updated: 9/12/2024 splita
 */
package username;

import java.util.Scanner;

/**
 * The Driver class will contain a number of helper
 * methods along with the main() method. The program will
 * be performing an experiment to verify the frequency of
 * values generated by rolling a certain collection of dice.
 */
public class Driver {
    /**
    The minimum of dice is 2.
     */
    public static final int MIN_DICE = 2;
    /**
     The maximum of dice is 10.
     */
    public static final int MAX_DICE = 10;

    private static int[] getInput(){
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter configuration:");
        String strConf = sc.nextLine();
        String[] dieStrData = strConf.split(" ", 3);
        int[] dieIntData = new int[dieStrData.length];
        for(int i = 0; i < dieIntData.length; i++){
            dieIntData[i] = Integer.parseInt(dieStrData[i]);
        }
        return dieIntData;
    }

    private static Die[] createDice(int numDice, int numSides) {
        Die[] dice = new Die[numDice];
        for (int i = 0; i < dice.length; i++) {
            dice[i] = new Die(numSides);
        }
        return dice;
    }

    private static int[] rollDice(Die[] dice, int numSides, int numRolls) {
        int rollsLength = (numSides - 1) * dice.length + 1;
        int[] rolls = new int[rollsLength];
        for(int i = 0; i < numRolls; i++) {
            int value = 0;
            for (Die aDie : dice) {
                value += aDie.getCurrentValue();
            }
            rolls[value - dice.length]++;
        }
        return rolls;
    }

    private static int findMax(int[] rolls){
        int max = rolls[0];
        for(int i = 1; i < rolls.length; i++) {
            if(rolls[i] > max) {
                max = rolls[i];
            }
        }
        return max;
    }

    private static void report(int numDice, int[] rolls, int max) {
        final double highestCount = 10.0;
        double scale = (double) max / highestCount;
        int[] asterisksInt = new int[rolls.length];
        String[] asterisksStr = new String[asterisksInt.length];
        for (int i = 0; i < rolls.length; i++) {
            asterisksInt[i] = (int) ((double) rolls[i] / scale) + 1;
        }
        for (int j = 0; j < asterisksStr.length; j++) {
            asterisksStr[j] = "";
            for (int k = 0; k < asterisksInt[j]; k++) {
                asterisksStr[j] += "*";
            }
        }
        for (int i = 0; i < rolls.length; i++) {
            int rollResult = numDice + i;
            System.out.println(rollResult + " :" + rolls[i]+"\t\t" + asterisksStr[i]);
        }
    }

    public static void main(String[] args) {
        System.out.println("Please enter the number of dice to roll," +
                " how many sides the dice have,\n and how many rolls" +
                " to complete, separating the values by a space.\n Example:" +
                " \"2 6 1000\"\n");
        int[] input = getInput();
        Die[] dice = createDice(input[0], input[1]);
        int[] rollDice = rollDice(dice, input[1], input[2]);
        int max = findMax(rollDice);
        report(input[0], rollDice, max);
    }
}